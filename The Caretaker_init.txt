document.getElementById("inner_window_1").children[0].innerHTML = `<h3 style=\"color:#478F9C;\">Midnight</h3>`
document.getElementById("inner_window_1").children[1].style.marginLeft = "-20px";
document.getElementById("inner_window_1").children[1].style.width = "calc(100% + -40px)"; // Adjust the value as needed
document.getElementById("inner_window_1").children[1].innerHTML = `
  <b style="color:#478F9C;">Preface</b><br><br>
  <img src="https://files.catbox.moe/kohzjf.png" alt="Image" style="width: %;">
  <p><span class="pulsating-blue">America is under attack, a siege.<br><br>For too long, it had been ruled by the loud minority of this nation — pointy-headed intellectuals, the shouters, the demonstrators. They addicted this country to welfare. They burned down our cities, pit Americans against each other. They tore this nation, this home of opportunity apart by racial violence. They tied down the strongest nation on earth for years in Vietnam.<br><br>When the great, silent majority of this nation finally fought back and elected Richard Nixon as President, they seethed and reeled. They lied about their President, insulted the very idea of America — all to glee of our enemies in Hanoi. They sabotaged the Administration at every possible turn. When the people saw through their manipulations and granted the President a second term, they unleashed the dirtiest of tricks, and paralyzed the entire Executive Branch with kooky Watergate investigations.<br><br>Now they try to reclaim the White House for themselves. But Dick Nixon came too far to let them. He will fight back. He will come out stronger than before, as he always did. He will protect America.</span></p>`;
document.getElementById("game_start").innerHTML = "<strong>Silence. Nothing but silence.</strong>";


campaignTrail_temp.election_json = [
    {
        "model": "campaign_trail.election",
        "pk": 10,
        "fields": {
            "year": 1976,
            "display_year": "1974-1976",
            "summary": "<h3>My God, can't they see? Can't they all see?</h3><br><br>The world is ending. <b>America itself</b> is ending. These Democrats, the radical liberal nuts, these kooks — they... they cannot protect it. None of them. They're irresponsible, dangerous even. They— they cannot possibly be trusted. In the modern... in the nuclear age, you cannot entrust the White House upon them. Goddamn, you can't trust them with anything.<br><br>Our time was limited. Had I not won 1972, this Republic would collapse. A crisis, a terrible crisis was coming. We... we only had 5 years left. 5 years to grow stronger, to make the best deals, I— I couldn't leave it up to chance. Up to <b>them</b>. These bastards would ruin what we built, what we— what we fought for.<br><br>I did it all to protect the nation. I— all in defense of... I...<br><br>I...<br></b>",
            "image_url": "https://i.imgur.com/tAiHfUP.png",
            "winning_electoral_vote_number": 270,
            "advisor_url": "123",
            "recommended_reading": "THE HOLY BIBLE",
            "has_visits": 1,
            "no_electoral_majority_image": "../static/images/2012-no-majority.jpg"
        }
    }
]

campaignTrail_temp.temp_election_list = [
    {
        "id": 10,
        "year": 1976,
        "is_premium": 0,
        "display_year": "1974-1976"
    }
]

campaignTrail_temp.credits = "<button onclick='credits()'>The Caretakers</button>"

credits = function() {
  credits = [ "Losos: Lead, Design, Writing, Code", "Emmy: Code, Assets, Music, Writing", "GeneralDoggo: Design, Assets", "Kyiv_Worker: Design", "Ariandel: Design"]
  text = "CREDITS:\n\n"
  for (i in credits) {
      text += credits[i] + "\n"
  }
  alert(text)
}

campaignTrail_temp.global_parameter_json = [
    {
        "model": "campaign_trail.global_parameter",
        "pk": 1,
        "fields": {
            "vote_variable": 1.125,
            "max_swing": 0.12,
            "start_point": 0.94,
            "candidate_issue_weight": 10,
            "running_mate_issue_weight": 3,
            "issue_stance_1_max": -0.71,
            "issue_stance_2_max": -0.3,
            "issue_stance_3_max": -0.125,
            "issue_stance_4_max": 0.125,
            "issue_stance_5_max": 0.3,
            "issue_stance_6_max": 0.71,
            "global_variance": 0.01,
            "state_variance": 0.005,
            "question_count": 30,
            "default_map_color_hex": "#C9C9C9",
            "no_state_map_color_hex": "#999999"
        }
    }
]

campaignTrail_temp.candidate_json = [
    {
        "model": "campaign_trail.candidate",
        "pk": 92,
        "fields": {
            "first_name": "Richard",
            "last_name": "Nixon",
            "election": 10,
            "party": "Republican Party",
            "state": "California",
            "priority": 1,
            "description": "<h3><b>Enough of these lies.</h3></b></p>\n\n<b>The charade is finally nearing its end.</b> The story of Tricky Dick, the most bloodthirsty and fascistic president in the nation's history, is almost over. Nixon's own fear, his own burning feelings of paranoia and resentment have become his undoing. How ironic.</p>\n\nBut as always, he is the last to acknowledge his fall. He remains in belief that he can still enter the books of history fondly — pull off another miraculous salvation of himself. The cornered beast he is, he will consider just about anything — from <b>resignation</b> in a futile attempt to become a martyr, to doing away with the pretense of constitutionalism <b>entirely</b>.</p>\n\nOnly God knows what will come out next from the raging inferno that is the Oval Office — <b>but whatever it is, it will define this nation.</b>",
            "color_hex": "#7c7cd0",
            "secondary_color_hex": null,
            "is_active": 1,
            "image_url": "https://files.catbox.moe/rd4quk.png",
            "electoral_victory_message": "This guy wins!",
            "electoral_loss_message": "This guy loses!",
            "no_electoral_majority_message": "We all win?",
            "description_as_running_mate": null,
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 2002,
        "fields": {
            "first_name": "Running",
            "last_name": "Mate",
            "election": 20,
            "party": "Turbo Team",
            "state": "Idaho",
            "priority": 1,
            "description": "<p>Put description here</p>",
            "color_hex": "#0000FF",
            "secondary_color_hex": null,
            "is_active": 0,
            "image_url": "https://www.jetsimon.com/public/candidateexample.png",
            "electoral_victory_message": "This guy wins!",
            "electoral_loss_message": "This guy loses!",
            "no_electoral_majority_message": "We all win?",
            "description_as_running_mate": "<p>This is a running mate description it only shows for running mates</p>",
            "candidate_score": 1,
            "running_mate": true
        }
    }
]

campaignTrail_temp.running_mate_json = [
    {
        "model": "campaign_trail.running_mate",
        "pk": 109261,
        "fields": {
            "candidate": 92,
            "running_mate": 2002
        }
    }
]

campaignTrail_temp.opponents_default_json = [
    {
        "election": 10,
        "candidates": [
            92
        ]
    }
]

campaignTrail_temp.opponents_weighted_json = [
    {
        "election": 10,
        "candidates": [
            92
        ]
    }
]

jet_data = {
    "headerColor": "#395887",
    "windowColor": "#7f3c39",
    "containerColor": "#adaca1",
    "innerWindowColor": "#9d6f6c",
    "bannerImageUrl": "https://i.imgur.com/QN7MHZq.png",
    "backgroundImageUrl": "https://i.imgur.com/7eEiorb.png",
    "endingTextColor": "#000000",
    "customQuote": "",
    "gameTitle": "The Campaign Trail."
}

//#startcode


corrr = '\n              <h2>The Campaign Trail.</h2>\n            ';

corrr = `<div style="font-size: 8px; font-family: monospace; color: white;">
    </div>
    `;

nct_stuff.themes[nct_stuff.selectedTheme].coloring_title = "#395887";

nct_stuff.themes[nct_stuff.selectedTheme].coloring_window = "#7f3c39";

document.getElementsByClassName("game_header")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_title;

$("#game_window")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_window;
$("#game_window")[0].style.backgroundImage = "url(https://i.imgur.com/39bg8Op.png)" 

$(".container")[0].style.backgroundColor = "#adaca1";

document.getElementById("header").src = "https://i.imgur.com/QN7MHZq.png";

document.body.background = "https://i.imgur.com/7eEiorb.png";

document.head.innerHTML += "<style>#results_container {color:#000000;} .inner_window_w_desc {background-color:#1f1e1a!important;}</style>";

campaignTrail_temp.modBoxTheme = {
     "header_color": "#395887",
     "header_text_color": "#e8e7d7",
     "description_text_color": "#000000",
     "description_background_color": "#e8e7d7",
     "main_color": "#7f3c39",
     "secondary_color": "#395887",
     "ui_text_color": "#FFFFFF"
}

styling = document.createElement("style");

document.head.appendChild(styling);

e = campaignTrail_temp;




jet_data = {
    "headerColor": "#395887",
    "windowColor": "#7f3c39",
    "containerColor": "#adaca1",
    "innerWindowColor": "#9d6f6c",
    "bannerImageUrl": "https://i.imgur.com/QN7MHZq.png",
    "backgroundImageUrl": "https://i.imgur.com/7eEiorb.png",
    "endingTextColor": "#000000",
    "customQuote": "",
    "gameTitle": "The Campaign Trail."
}

//#startcode


corrr = '\n              <h2>The Campaign Trail.</h2>\n            ';

corrr = `<div style="font-size: 8px; font-family: monospace; color: white;">
    </div>
    `;

nct_stuff.themes[nct_stuff.selectedTheme].coloring_title = "#395887";

nct_stuff.themes[nct_stuff.selectedTheme].coloring_window = "#7f3c39";

document.getElementsByClassName("game_header")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_title;

$("#game_window")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_window;
$("#game_window")[0].style.backgroundImage = "url(https://i.imgur.com/39bg8Op.png)" 

$(".container")[0].style.backgroundColor = "#adaca1";

document.getElementById("header").src = "https://i.imgur.com/QN7MHZq.png";

document.body.background = "https://i.imgur.com/7eEiorb.png";

document.head.innerHTML += "<style>#results_container {color:#000000;} .inner_window_w_desc {background-color:#9d6f6c!important;}</style>";

campaignTrail_temp.modBoxTheme = {
     "header_color": "#395887",
     "header_text_color": "#e8e7d7",
     "description_text_color": "#000000",
     "description_background_color": "#e8e7d7",
     "main_color": "#7f3c39",
     "secondary_color": "#395887",
     "ui_text_color": "#FFFFFF"
}

styling = document.createElement("style");

document.head.appendChild(styling);


styling.innerHTML = `

#opponent_selection_id_back {

    display: none;

}

#inner_window_1 {
    background-color: #1F1D19;
    height: 494px; 
    color: #F8F8F8;
  }

 #inner_window_2{
   background-color: #DFDFD9; 
   color: #F8F8F8;
   animation: bgFadeS1 1s ease-in-out forwards !important;
 }
 #election_description_window{
   background-color: #1F1D19;
   font-size:12.6px;
   height: 317px;          
 }

  #credits {
     position: relative;
     left:-253px;
     bottom: -90px;
   }

      #election_image {
          margin-left: 0px;
          margin-top: 0px;
          width:448px;
          height: 317px;
          background-image: 
            linear-gradient(to right, transparent, rgba(32, 30, 26, 1)), 
            url('https://files.catbox.moe/zr22f5.png'); 
          background-size: cover; 
          z-index: 1;
            }

    #election_image img{
          padding: 1px 1px; 
          border: 1px solid #C9C9C9;
          z-index: 0;
          opacity: 0;
        }

        #candidate_image{
          width: 274px;
          height: 282px;
          margin-right: 20px;
          border:none;
          outline:none;
        }
        #candidate_image img{
          width: 274px;
          height: 282px;
          padding: 1px 1px; 
          outline: 1px solid #C9C9C9;
          
        }

   @keyframes pulseGlow {
    0% {
      text-shadow: 0px 0px 5px #478F9C, 0px 0px 10px darkblue, 0px 0px 10px #478F9C;
    }
    50% {
      text-shadow: 0px 0px 12px #478F9C, 0px 0px 12px darkblue, 0px 0px 17px #478F9C;
    }
    100% {
      text-shadow: 0px 0px 5px #478F9C, 0px 0px 10px darkblue, 0px 0px 10px #478F9C;
    }
  }

  .pulsating-blue {
    animation: pulseGlow 2s infinite;
  }


`


let z = new MutationObserver((mutationsList, observer) => {

    let runningMateSummary = document.querySelector("#running_mate_summary");
    

    if (runningMateSummary) {

        $("#running_mate_id_button").click();

        observer.disconnect()

    }

});


z.observe(document, { subtree: true, childList: true });

  function addDynamicCSS() {
    var css = `

    label {
      cursor:default;
    }
    
    .inner_window_question h3 .mytooltip{
        background-color: lightskyblue;
    }
    
    .mytooltip {
        position: relative;
        display: inline-block;
        cursor: pointer;
        background-color: #d8dee8;
    }
    
    .mytooltip .mytooltiptext {
        width: 240px;
        background-color: #d8dee8;
        color: black;
        text-align: center;
        border-radius: 6px;
        padding: 10px;
        position: absolute;
        z-index: 99;
        bottom: 20%;
        left: 20%;
        margin-left: -90px;
        opacity: 0;
        transition: opacity 0.3s;
        border: 1px solid black;
        pointer-events: none;
        font-size: 13px !important;
        line-height: 1.5em !important;
        font-weight: normal !important;
        font-style: normal !important;
    }
    
    .mytooltip .mytooltiptext img {
        max-width: 240px;
        height: auto;
    }
    
    .mytooltip:hover .mytooltiptext {
        opacity: 1;
        transition-delay: 0.5s;
    }
  
        label {
          cursor:default;
        }
  
        .inner_window_question h3 .mytooltip{
            background-color: #206466;
            font-style: italic;
            padding: 2px; 
        }
  
        .mytooltip {
            position: relative;
            display: inline-block;
            cursor: pointer;
            background-color: #206466;
        }
  
        .mytooltip .mytooltiptext {
            width: 240px;
            background-color: #206466;
            color: white;
            text-align: center;
            border-radius: 6px;
            padding: 10px;
            position: absolute;
            z-index: 99;
            bottom: 20%;
            left: 20%;
            margin-left: -90px;
            opacity: 0;
            transition: opacity 0.3s;
            border: 1px solid black;
            pointer-events: none;
            font-size: 13px !important;
            line-height: 1.5em !important;
            font-weight: normal !important;
            font-style: normal !important;
        }
  
        .mytooltip .mytooltiptext img {
            max-width: 240px;
            height: auto;
        }
  
        .mytooltip:hover .mytooltiptext {
            opacity: 1;
            transition-delay: 0.5s;
        }
    `;
  
    var styleElem = document.createElement('style');
    styleElem.type = 'text/css';
    
    styleElem.appendChild(document.createTextNode(css));
    
    document.head.appendChild(styleElem);
  }
  
  
  addDynamicCSS();

  tooltipList = [
    // Q1
    {searchString: "Bob Dole", explanationText: "<img src=https://i.imgur.com/BcP7HEt.gif> Extremely Overrated!"},
    ];

class Song {
constructor(title, artist, coverLink, audioLink) {
  this.title = title;
  this.artist = artist;
  this.coverLink = coverLink;
  this.audioLink = audioLink;
}
getTitle() {
  return this.title;
}

getArtist() {
  return this.artist;
}

getCoverLink() {
  return this.coverLink;
}

getAudioLink() {
  return this.audioLink;
}
}

class Playlist {
constructor() {
  this.songs = [];
  this.currentSongIndex = 0;
}

addSong(song) {
  this.songs.push(song);
}

getCurrentSong() {
  return this.songs[this.currentSongIndex];
}

playNext() {
  this.currentSongIndex = (this.currentSongIndex + 1) % this.songs.length;
}

playPrevious() {
  this.currentSongIndex = (this.currentSongIndex - 1 + this.songs.length) % this.songs.length;
}
}
window.Playlist=Playlist
window.Song=Song

function changePlaylist(newPlaylist) {
playlist = newPlaylist;
playlist.currentSongIndex = 0;
updateUI(playlist);
const audio = document.getElementById("audio");
audio.src = playlist.getCurrentSong().audioLink;
decodeAudio();
audio.play();
}
window.changePlaylist=changePlaylist

function updateUI(playlist) {
  const currentSong = playlist.getCurrentSong();
  var player = document.getElementById("player");
  player.querySelector("#cover").src = currentSong.getCoverLink();
  player.querySelector("#title").textContent = currentSong.getTitle();
  player.querySelector("#artist").textContent = currentSong.getArtist();
}

window.updateUI=updateUI

let getAudioAmplitude = (time) => 0;

async function isBraveBrowser() {
  if (window.navigator.brave && await window.navigator.brave.isBrave()) {
    return true;
  } else {
    return false;
  }
}

async function decodeAudio(audioSrc) {
try {
  if (await isBraveBrowser()) return null; 

  const audioContext = new AudioContext();
  const response = await fetch(audioSrc);
  const arrayBuffer = await response.arrayBuffer();
  const buffer = await audioContext.decodeAudioData(arrayBuffer);

  const sampleRate = buffer.sampleRate;
  const totalSamples = buffer.length;
  const numChannels = buffer.numberOfChannels;

  // Reduce memory usage by processing every 32nd sample
  const downsampleFactor = 32;
  const reducedSize = Math.floor(totalSamples / downsampleFactor);
  
  let amplitudes = new Float32Array(reducedSize);
  let meanAmplitude = 0;

  for (let i = 0; i < reducedSize; i++) {
    let sum = 0;
    for (let channel = 0; channel < numChannels; channel++) {
      sum += buffer.getChannelData(channel)[i * downsampleFactor] ** 2; 
    }
    amplitudes[i] = sum / numChannels; 
    meanAmplitude += amplitudes[i];
  }

  meanAmplitude /= reducedSize;

  getAudioAmplitude = function (time) {
    const delay = 0.17;
    let index = Math.floor((time + delay) * sampleRate / downsampleFactor);
    index = Math.min(index, reducedSize - 1);
    let amplitudeNorm = amplitudes[index] / (2 * meanAmplitude);
    return Math.min(amplitudeNorm, 1);
  };

  console.log("Audio decoded successfully!");

} catch (error) {
  console.error("Error decoding audio:", error);
}
}

  
function setupMusicPlayer() {

playlist = new Playlist();

const song1 = new Song(
  "Piano Concerto No. 1",
  "Richard Nixon",
  "https://files.catbox.moe/7dxzpz.png",
  "https://files.catbox.moe/oaxq8x.mp3"
);


playlist.addSong(song1);


const playerContainer = document.createElement("div");
playerContainer.id = "player";

const displayBox = document.createElement("div");
displayBox.id = "display-box";

const coverElement = document.createElement("img");
coverElement.id = "cover";
displayBox.appendChild(coverElement);

const infoContainer = document.createElement("div");
infoContainer.id = "info-container";
infoContainer.style.backgroundImage = "url('https://i.imgur.com/BSXotSO.png')";
infoContainer.style.backgroundSize = "cover"; // Optional: adjust based on your needs
infoContainer.style.color = "#cfcfcf"; // Set text color to white
infoContainer.style.position = 'relative';


const songInfo = document.createElement("div");
songInfo.id = "song-info";

const titleElement = document.createElement("h3");
titleElement.id = "title";
titleElement.style.fontWeight = 'normal'; // Make it normal as per previous request
songInfo.appendChild(titleElement);

const artistElement = document.createElement("p");
artistElement.id = "artist";
songInfo.appendChild(artistElement);

infoContainer.appendChild(songInfo);
displayBox.appendChild(infoContainer);

playerContainer.appendChild(displayBox);

const controlsContainer = document.createElement("div");
controlsContainer.id = "controls-container";

const controls = document.createElement("div");
controls.id = "controls";

// Create the image element for the button
const prevButton = document.createElement("img");
prevButton.id = "prevButton";
prevButton.src = "https://i.imgur.com/Zkk16Uy.png"; // Default image
prevButton.alt = "Previous";
controls.appendChild(prevButton);

// Add event listeners for mousedown and mouseup
prevButton.addEventListener("mousedown", function() {
  prevButton.style.filter = "brightness(0.4)";
});

prevButton.addEventListener("mouseup", function() {
  prevButton.style.filter = "brightness(1)";
});


prevButton.addEventListener("mouseleave", function() {
  prevButton.style.filter = "brightness(1)";
});

const playPauseButton = document.createElement("img");
playPauseButton.id = "playPauseButton";
playPauseButton.src = "https://i.imgur.com/LxQnVBj.png"; // Set the default Pause image
playPauseButton.alt = "Play/Pause";
controls.appendChild(playPauseButton);

const nextButton = document.createElement("img");
nextButton.id = "nextButton";
nextButton.src = "https://i.imgur.com/P39RRW4.png"; // Default image for "Next"
nextButton.alt = "Next";
controls.appendChild(nextButton);


nextButton.addEventListener("mousedown", function() {
  nextButton.style.filter = "brightness(0.4)";
});

nextButton.addEventListener("mouseup", function() {
  nextButton.style.filter = "brightness(1)";
});


nextButton.addEventListener("mouseleave", function() {
  nextButton.style.filter = "brightness(1)";
});

controlsContainer.appendChild(controls);

// Play/Pause functionality with image toggle
playPauseButton.addEventListener("click", function () {
  const audio = document.getElementById("audio");
  if (audio.paused) {
    audio.play();
    playPauseButton.src = "https://i.imgur.com/LxQnVBj.png"; // Pause image
  } else {
    audio.pause();
    playPauseButton.src = "https://i.imgur.com/Kb4y3wX.png"; // Set the play image
    updateProgressBar();
  }
});


// Press effect for the play/pause button
playPauseButton.addEventListener("mousedown", function() {
    playPauseButton.style.filter = "brightness(0.4)"; 
});


playPauseButton.addEventListener("mouseup", function() {
    playPauseButton.style.filter = "brightness(1)"; 
});

playPauseButton.addEventListener("mouseleave", function() {
    playPauseButton.style.filter = "brightness(1)"; 
});

nextButton.addEventListener("click", function () {
playlist.playNext();
updateUI(playlist);
const audio = document.getElementById("audio");
audio.src = playlist.getCurrentSong().audioLink;
decodeAudio(audio.src);
audio.play();
});

prevButton.addEventListener("click", function () {
playlist.playPrevious();
updateUI(playlist);
const audio = document.getElementById("audio");
audio.src = playlist.getCurrentSong().audioLink;
decodeAudio(audio.src);
audio.play();
});



// Create the progress bar container
const progressBarContainer = document.createElement("div");
progressBarContainer.id = "progress-bar-container";

// Create the progress bar slider
const progressBar = document.createElement("input");
progressBar.type = "range"; // Change to range type for a slider
progressBar.id = "progress-bar";
progressBar.value = "0";
progressBar.max = "100";
progressBar.step = "0.1"; // Optional: sets the granularity of the slider

progressBarContainer.appendChild(progressBar);
controlsContainer.appendChild(progressBarContainer);
playerContainer.appendChild(controlsContainer);

const volumeContainer = document.createElement("div");
volumeContainer.id = "volume-container";

const volumeLabel = document.createElement("img");
volumeLabel.src = "https://i.imgur.com/jjUzV10.png"; // Set the volume image
volumeLabel.alt = "Volume";
volumeContainer.appendChild(volumeLabel);

const volumeSliderContainer = document.createElement("div");
volumeSliderContainer.classList.add("is-vertical");
volumeSliderContainer.style.marginLeft = "23%";
volumeSliderContainer.style.height = "126px";

const volumeSlider = document.createElement("input");
volumeSlider.type = "range";
volumeSlider.id = "volumeSlider";
volumeSlider.min = 0;
volumeSlider.max = 9;
volumeSlider.step = 1;
volumeSlider.value = 3; // Initial volume

volumeSliderContainer.appendChild(volumeSlider);

const volumeDisplay = document.createElement("span");
volumeDisplay.id = "volume-display";
volumeDisplay.style.fontWeight = 'bold'; 
volumeDisplay.style.display = 'none';
volumeDisplay.textContent = "1";

volumeContainer.appendChild(volumeSliderContainer);
volumeContainer.appendChild(volumeDisplay);

playerContainer.appendChild(volumeContainer);

gameWindow_player.insertAdjacentElement("afterend", playerContainer);


// Update progress bar as the song plays
function updateProgressBar() {
const audio = document.getElementById("audio");
const progress = (audio.currentTime / audio.duration) * 100;
progressBar.value = progress;

const MIN_DEG = -45, MAX_DEG = 45;

// If paused, use amplitude=0 so it rotates to -45.
let amplitude = audio.paused 
                ? 0 
                : getAudioAmplitude(audio.currentTime);

}


// Seek functionality when the slider is moved
progressBar.addEventListener("input", function () {
  const audio = document.getElementById("audio");
  const seekTime = (progressBar.value / 100) * audio.duration;
  audio.currentTime = seekTime;
});

// Setup the audio element and event listeners
const audio = document.createElement("audio");
audio.id = "audio";
audio.src = playlist.getCurrentSong().audioLink;
decodeAudio(audio.src);
audio.volume = 1 / 9;

audio.addEventListener("timeupdate", updateProgressBar);
audio.addEventListener("ended", function () {
  // Play the next song when the current song ends
  playlist.playNext();
  updateUI(playlist);
  audio.src = playlist.getCurrentSong().audioLink;
  decodeAudio(audio.src);
  audio.play();
});

  let currentVolume = 1; // Initial volume

volumeSlider.addEventListener("input", function () {
  currentVolume = parseInt(volumeSlider.value, 10);
  updateVolumeDisplay();
  updateAudioVolume();
});

function updateVolumeDisplay() {
  volumeDisplay.textContent = currentVolume;
}

 function updateAudioVolume() {
  const audio = document.getElementById("audio");
  audio.volume = currentVolume / 9; // Set volume between 0 and 1
}

document.body.appendChild(audio);
audio.play();


// Update the UI when the page loads
updateUI(playlist);
}


const style = document.createElement("style");
style.textContent = `
#player {
  border: 3px solid #C9C9C9; 
  display: flex;
  flex-direction: row;
height:191px;
  background-Image: url("https://i.imgur.com/57IeWZc.png"); 
}

#display-box {
  display: flex;
  align-items: center;
  width: 50%;
}

#cover {
  width: 176px;
height:176px;
}

#info-container {
  display: flex;
  flex-direction: row;
  height:178px;
width:127px;
margin-top: 3px;
}

#song-info {
  width: 100%;
padding:5px;
}

#controls-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 10px;
  width:100%;
padding-top:15px;

}
.is-vertical #volumeSlider {
width: 16px;
appearance: slider-vertical;
}

#controls {
  display: flex;
  flex-direction: row;
  justify-content: center;
  width: 80%;
}

#progress-bar-container {
  width: 100%;
}

#progress-bar {
  width: 80%;
  margin: auto;
  display: flex;
  margin-top: 20px;
  appearance: none; 
  background: #ccc; 
  height: 5px; 
  border-radius: 5px; 
  outline: none; 
  cursor: pointer; 
}

#progress-bar::-webkit-slider-thumb {
  appearance: none; /* Remove default styling for consistency across browsers */
  width: 15px;
  height: 15px;
  background: #333; /* Slider thumb color */
  border-radius: 50%; /* Round thumb */
  cursor: pointer;
}

#progress-bar::-moz-range-thumb {
  width: 15px;
  height: 15px;
  background: #333;
  border-radius: 50%;
  cursor: pointer;
}

#question_form {
  color: #05094D;
}

.inner_window_question {
  background-color:#f1f1f1;
  border-radius: 5px; 
  position: relative;
  overflow: visible;
}

.inner_window_question h3 {
  background-color:#05094D;
  border-radius: 5px;
  box-shadow: 
  0 0 5px rgba(224, 255, 255, 0.5),  
  0 0 10px rgba(224, 255, 255, 0.3),  
  0 0 20px rgba(224, 255, 255, 0.1); 
}

@keyframes fadeInScale {
  0% {
      opacity: 0;
      transform: scale(0.8);
  }
  100% {
      opacity: 1;
      transform: scale(1);
  }
}

.overlay_window {
  position: absolute;
  opacity: 0; /* Start hidden */
  transform: scale(0.8); /* Start slightly smaller */
  background-color: #f1f1f1;
  border-radius: 5px;
  box-shadow:
      0 0 10px rgba(224, 255, 255, 0.5),  
      0 0 20px rgba(224, 255, 255, 0.3),  
      0 0 40px rgba(224, 255, 255, 0.1);
  
  height: 62%;
  width: 50%;
  top: 17%;
  left: 25%;
  
  border-style: double;
  border-color: #C9C9C9;

  animation: fadeInScale 0.3s cubic-bezier(0.3, 1.2, 0.2, 1) forwards;
}


.overlay_window h3 {
  background-color: #ffffff;
}

.overlay_window_content {
  color: #05094D;
}

#progress_bar h3 {
  color: #05094D;
  }

  .inner_inner_window h3 {
      color: #ffffff;
      }

  .inner_window_sign_display {
      background-color:#f1f1f1;
  }

  .overlay_window img {
    width: 251px;
    height: 134px;
}


.final_results_table {
  color: black;
}

#state_result_data_summary table {
  color: black;
}

#state_result_data_summary table th,
#state_result_data_summary table td {
  color: black; 
}

#overall_result_container,
#menu_container,
#state_result_container {
  background-color:transparent
}

#map_container{
  background-color:#f1f1f1;
  border-radius: 25px; 
  box-shadow: 
  0 0 10px rgba(224, 255, 255, 0.5),  
  0 0 20px rgba(224, 255, 255, 0.3),  
  0 0 40px rgba(224, 255, 255, 0.1); 
  position: relative;
  overflow: hidden;
}

.campaign_trail_start_emphasis {
  background-color: transparent;
}

.cheatIndicator {
position: absolute;
}
#difficulty_mult {
display: none;
}
#results_container{
  overflow: auto;
}
.person_image {
  position: sticky;
  top: 16px; 
  align-self: flex-start;
  z-index: 1;
  float: left;
  margin: 1.2em 1em 0;
  border: double;
  border-color: #C9C9C9;
  height: 250px;
}


.final_results_table {
width: 66% !important;
table-layout: fixed !important;
border-collapse: collapse !important;
margin-right: 3% !important;
font-family: Georgia, serif !important;
background-color: #e6ecf5 !important;
box-shadow: 0 0 12px rgba(0, 0, 0, 0.2) !important;
}

.final_results_table th,
.final_results_table td {
padding: 2px 4px !important;
border: 1px solid #ccc !important;
text-align: center !important;
white-space: nowrap !important; /* ⬅ Prevents wrapping */
}

.final_results_table td:first-child {
text-align: left !important;
width: 40% !important; /* ⬅ Makes room for long names */
}


`;

document.head.appendChild(style);

async function appendStyle() {
  var metaTag=document.createElement('meta');
  metaTag.name = "viewport";
  metaTag.content = "width=device-width, initial-scale=1";
  document.getElementsByTagName('head')[0].appendChild(metaTag);

  if (!document.querySelector('#radio-option-style')) {
      let style = document.createElement('style');
      style.type = 'text/css';
      style.id = 'radio-option-style';
      style.innerHTML = `
      #visit_window {
          height: auto;
      }
      #visit_content {
          height: 79%;
      }

.person_button{
margin-top:0.2em
}
      @media only screen and (max-width: 768px) {

          #inner_window_2,
          #inner_window_3,
          #inner_window_4{
              overflow:visible;
          }
          #visit_window {
              font-size: 1.8em;
              width: 90%;
              left:5%;
          }
          .inner_window_question button,
              #visit_window button,
              #map_footer{
                  line-height: 2.5em;
              }
          #drop_down_area_state {
              margin-left: auto;
              margin-right: auto;
          }
      }
      `;

      document.head.appendChild(style);
  }
}
appendStyle();

const gameWindow_player = document.getElementById("game_window");
//use this function directly or put it in an event listener to start the music on the press of a certain button
setupMusicPlayer();


//#endcode
