campaignTrail_temp.election_json = [
    {
        "model": "campaign_trail.election",
        "pk": 9,
        "fields": {
            "year": 2000,
            "display_year": "The Revolution",
            "summary": "To the right, the Devil. To the left, Christ. A social democrat in the Presidency, delusional, laughable, and now real. 2016 was a meeting between the right's Savior and the left's Messiah. It was a clash of titans, and in the end, the old, white-haired face of Bernard \"Bernie\" Sanders came out victorious. His glory is unmatched. His achievements are remarkable. The <b>Revolution</b> has come to America.<br><br>\n\nTo his right, the whole of the United States political system. To his left, the fringe, weird pockets of communist sympathizers. His evenly divided Senate and his broken House all led to the downfall of a man who always sought to steer the ship in the right direction. <br><br>\n\nFrom home to home, the voices of the Republicans drown any sense of knowledge, they speak of a communist takeover. They are wrong. Now, with glory rising on the horizon, America will bear witness to the might and mercy of the Messiah.\n",
            "image_url": "https://files.catbox.moe/sve4nu.png",
            "winning_electoral_vote_number": 270,
            "advisor_url": "https://files.catbox.moe/zp98n6.gif",
            "recommended_reading": "<ul>\n<li><a href=https://www.chicagotribune.com/opinion/editorials/ct-edit-chicago-tribune-biden-endorsement-20200925-lnyxsb5qvrftnjjmj3rnzj33jy-story.html>Our Case For Joe Biden</a></li>\n<li><a href=https://nationalinterest.org/feature/case-trump-166808>The Case For Trump</a></li>\n<li><a href=https://www.npr.org/2020/11/18/935730100/how-biden-won-ramping-up-the-base-and-expanding-margins-in-the-suburbs>How Biden Won: Ramping Up The Base And Expanding Margins In The Suburbs</a></li>\n<li><a href=https://www.prospectmagazine.co.uk/politics/donald-trump-joe-biden-us-election-almost-win-votes-concede>Why Did Trump Almost Win?</a></li>\n<li><a href=https://www.hoover.org/research/no-evidence-voter-fraud-guide-statistical-claims-about-2020-election>No Evidence For Voter Fraud: A Guide To Statistical Claims About The 2020 Election</a></li>\n</ul>",
            "has_visits": 1,
            "no_electoral_majority_image": "../static/images/2012-no-majority.jpg"
        }
    }
]

campaignTrail_temp.temp_election_list = [
    {
        "id": 9,
        "year": 2000,
        "is_premium": 0,
        "display_year": "The Revolution"
    }
]

campaignTrail_temp.credits = "<button onclick='credits()'>Emmy &</button>"

credits = function() {
  credits = ["Lead Dev: Emmy", "Coding: Emmy, ordep", "Writing: Freiheit, ElPres, Emmy, accuratelys, Dking, Az, Shockonomics", "Special Thanks: KaiserLink, for giving us advice"]
  text = "CREDITS:\n\n"
  for (i in credits) {
      text += credits[i] + "\n"
  }
  alert(text)
}

campaignTrail_temp.global_parameter_json = [
    {
        "model": "campaign_trail.global_parameter",
        "pk": 1,
        "fields": {
            "vote_variable": 1.125,
            "max_swing": 0.12,
            "start_point": 0.94,
            "candidate_issue_weight": 10,
            "running_mate_issue_weight": 3,
            "issue_stance_1_max": -0.71,
            "issue_stance_2_max": -0.3,
            "issue_stance_3_max": -0.125,
            "issue_stance_4_max": 0.125,
            "issue_stance_5_max": 0.3,
            "issue_stance_6_max": 0.71,
            "issue_stance_7_max": 0.9,
            "global_variance": 0.01,
            "state_variance": 0.005,
            "question_count": 32,
            "default_map_color_hex": "#C9C9C9",
            "no_state_map_color_hex": "#999999"
        }
    }
]


campaignTrail_temp.candidate_json = [
    {
        "model": "campaign_trail.candidate",
        "pk": 21,
        "fields": {
            "first_name": "Bernie",
            "last_name": "Sanders",
            "election": 9,
            "party": "Democrat",
            "state": "Vermont",
            "priority": 1,
            "description": "<p>When asked on the streets, people will say that President Bernie Sanders is either a communist tyrant seeking to destroy the American Dream or that he is the savior of the Democratic Party - a party long corrupted by the establishment - and America itself. A pariah of his own party somehow managing to snatch enough power to not only be their nominee but also the President for the next few years is something that no one thought would be possible, yet Bernie proved them all wrong.</p>\n\n<p>Now, from the Oval Office, he sees every woe of the American people. He sees those who are struggling to survive, yet he feels unable to help. Inheriting the divided Congress of the Obama years would have been hard for Hillary, but for Bernie? It was a disaster. The most powerful man in the world finds himself powerless to do anything.</p>\n",
            "color_hex": "#3c3cb5",
            "secondary_color_hex": null,
            "is_active": 1,
            "image_url": "https://files.catbox.moe/tfwj57.gif",
            "electoral_victory_message": "This guy wins!",
            "electoral_loss_message": "This guy loses!",
            "no_electoral_majority_message": "We all win?",
            "description_as_running_mate": null,
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 45,
        "fields": {
            "first_name": "Mrs",
            "last_name": "Toaster Hater",
            "election": 9,
            "party": "Libertarian",
            "state": "South Carolina",
            "priority": 3,
            "description": "'",
            "color_hex": "#c9b34c",
            "secondary_color_hex": "#c9b34c",
            "is_active": 0,
            "image_url": "'",
            "electoral_victory_message": "'",
            "electoral_loss_message": "'",
            "no_electoral_majority_message": "'",
            "description_as_running_mate": "'",
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 55,
        "fields": {
            "first_name": "Mr",
            "last_name": "Saboteurs",
            "election": 9,
            "party": "Green",
            "state": "New York",
            "priority": 4,
            "description": "'",
            "color_hex": "#27772e",
            "secondary_color_hex": "#27772e",
            "is_active": 0,
            "image_url": "'",
            "electoral_victory_message": "'",
            "electoral_loss_message": "'",
            "no_electoral_majority_message": "'",
            "description_as_running_mate": "'",
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 65,
        "fields": {
            "first_name": "Mrs",
            "last_name": "The 1%",
            "election": 9,
            "party": "Republican",
            "state": "California",
            "priority": 5,
            "description": "'",
            "color_hex": "#b31d1d",
            "secondary_color_hex": "#ff9090",
            "is_active": 0,
            "image_url": "",
            "electoral_victory_message": "'",
            "electoral_loss_message": "'",
            "no_electoral_majority_message": "'",
            "description_as_running_mate": "</p>",
            "candidate_score": 0,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 22,
        "fields": {
            "first_name": "Amy",
            "last_name": "Klobuchar",
            "election": 9,
            "party": "Democrat",
            "state": "Minnesota",
            "priority": 1,
            "description": "<p>Put description here</p>",
            "color_hex": "#c9b34c",
            "secondary_color_hex": null,
            "is_active": 0,
            "image_url": "https://files.catbox.moe/h65bs3.gif",
            "electoral_victory_message": "This guy wins!",
            "electoral_loss_message": "This guy loses!",
            "no_electoral_majority_message": "We all win?",
            "description_as_running_mate": "<p>What was Joe Biden? He searched for the Presidency his whole life, worked day and night in the Senate for decades, then played second fiddle to a man that outmatched him with a fraction's fraction of the experience. Amy Klobuchar has had more than enough conversations with Joe to know precisely what fate could well befall her, too. How could she not? She's the same \"moderating influence\" to the \"change candidate\" he was, and she didn't even get a lifetime of lawmaking first. She knows better than to sit back and let this happen to her. If Joe hadn't taught her by accident, she'd still have known from a good deal of experience in the DFL that if you don't seize life, it seizes you.<br><br>She doesn't agree with Bernie on a lot, heck, not even on most issues, but she knows that good can still be done here. She just prays she's not forgotten about it.</P>",
            "candidate_score": 1,
            "running_mate": true
        }
    },
        {
        "model": "campaign_trail.candidate",
        "pk": 46,
        "fields": {
            "first_name": "Mrs",
            "last_name": "Toaster Hater",
            "election": 9,
            "party": "Libertarian",
            "state": "South Carolina",
            "priority": 3,
            "description": "'",
            "color_hex": "#c9b34c",
            "secondary_color_hex": "#c9b34c",
            "is_active": 0,
            "image_url": "'",
            "electoral_victory_message": "'",
            "electoral_loss_message": "'",
            "no_electoral_majority_message": "'",
            "description_as_running_mate": "'",
            "candidate_score": 1,
            "running_mate": true
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 56,
        "fields": {
            "first_name": "Mr",
            "last_name": "Saboteurs",
            "election": 9,
            "party": "Green",
            "state": "New York",
            "priority": 4,
            "description": "'",
            "color_hex": "#27772e",
            "secondary_color_hex": "#27772e",
            "is_active": 0,
            "image_url": "'",
            "electoral_victory_message": "'",
            "electoral_loss_message": "'",
            "no_electoral_majority_message": "'",
            "description_as_running_mate": "'",
            "candidate_score": 1,
            "running_mate": true
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 66,
        "fields": {
            "first_name": "Mrs",
            "last_name": "The 1%",
            "election": 9,
            "party": "Republican",
            "state": "California",
            "priority": 5,
            "description": "'",
            "color_hex": "#FF0000",
            "secondary_color_hex": "#ff9090",
            "is_active": 0,
            "image_url": "",
            "electoral_victory_message": "'",
            "electoral_loss_message": "'",
            "no_electoral_majority_message": "'",
            "description_as_running_mate": "</p>",
            "candidate_score": 0,
            "running_mate": true
        }
    }
]

campaignTrail_temp.running_mate_json = [
    {
        "model": "campaign_trail.running_mate",
        "pk": 23,
        "fields": {
            "candidate": 21,
            "running_mate": 22
        }
    },
    {
        "model": "campaign_trail.running_mate",
        "pk": 24,
        "fields": {
            "candidate": 65,
            "running_mate": 66
        }
    },
   {
        "model": "campaign_trail.running_mate",
        "pk": 25,
        "fields": {
            "candidate": 55,
            "running_mate": 56
        }
    },
     {
        "model": "campaign_trail.running_mate",
        "pk": 26,
        "fields": {
            "candidate": 45,
            "running_mate": 46
        }
    }
]

campaignTrail_temp.opponents_default_json = [
  {
      "election": 9,
      "candidates": [
          21,
          45,
          55,
          65
      ]
  }
]

campaignTrail_temp.opponents_weighted_json = [
  {
      "election": 9,
      "candidates": [
         21,
         45,
         55,
         65
      ]
  }
]




//#startcode

corrr = `
  <div style="font-size: 11px; font-family: monospace; color: white;">
    <h2 style="font-style: normal;">
      <img src="https://files.catbox.moe/hffrfb.png" alt="THE REVOLUTION" style="margin-top: 5px;">
    </h2>
  </div>
  `;


nct_stuff.themes[nct_stuff.selectedTheme].coloring_title = "#1163ac";

nct_stuff.themes[nct_stuff.selectedTheme].coloring_window = "#1163ac";

document.getElementsByClassName("game_header")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_title;

$("#game_window")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_window;

$(".container")[0].style.backgroundColor = "#1163ac";

document.getElementById("header").src = "https://files.catbox.moe/44q0tf.png";

document.body.background = "https://www.surforma.com/media/filer_public/2b/51/2b5161ec-ca8b-4d3c-af77-f3947dc19506/ls5230_silk_solid_blue.jpg";

document.head.innerHTML += "<style>#results_container {color:#000000;} .inner_window_w_desc {background-color:#1163ac!important;}</style>";

//#endcode

 RecReading=true
    
  // Select the node that will be observed for mutations
  const windowsAdvisorTargetNode = document.getElementById("game_window");
  
  // Options for the observer (which mutations to observe)
  const windowsAdvisorConfig = { attributes: true, childList: true, subtree: true };
  
  // Callback function to execute when mutations are observed
  const callback = (mutationList, observer) => {
      visitWindow = document.getElementsByClassName("overlay_window")[0];
  
      if(visitWindow == null || visitWindow.classList.contains("done")) {
          return;
      }
      visitWindow.classList.add("done");
      visitWindow.classList.add("window");
      let titleBar = visitWindow.querySelector("h3");
      titleBar.classList.add("title-bar");
      titleBar.classList.add("title-bar-text")
      titleBar.style.paddingLeft = "3px";
  };
  
  class Song {
    constructor(title, artist, coverLink, audioLink) {
      this.title = title;
      this.artist = artist;
      this.coverLink = coverLink;
      this.audioLink = audioLink;
    }
    getTitle() {
      return this.title;
    }
  
    getArtist() {
      return this.artist;
    }
  
    getCoverLink() {
      return this.coverLink;
    }
  
    getAudioLink() {
      return this.audioLink;
    }
  }
  
  class Playlist {
    constructor() {
      this.songs = [];
      this.currentSongIndex = 0;
    }
  
    addSong(song) {
      this.songs.push(song);
    }
  
    getCurrentSong() {
      return this.songs[this.currentSongIndex];
    }
  
    playNext() {
      this.currentSongIndex = (this.currentSongIndex + 1) % this.songs.length;
    }
  
    playPrevious() {
      this.currentSongIndex = (this.currentSongIndex - 1 + this.songs.length) % this.songs.length;
    }
  }
  window.Playlist=Playlist
  window.Song=Song
  
  function changePlaylist(newPlaylist) {
    playlist = newPlaylist;
    playlist.currentSongIndex = 0;
    updateUI(playlist);
    const audio = document.getElementById("audio");
    audio.src = playlist.getCurrentSong().audioLink;
    audio.play();
  }
  window.changePlaylist=changePlaylist
  
  function updateUI(playlist) {
      const currentSong = playlist.getCurrentSong();
      var player = document.getElementById("player");
      player.querySelector("#cover").src = currentSong.getCoverLink();
      player.querySelector("#title").textContent = currentSong.getTitle();
      player.querySelector("#artist").textContent = currentSong.getArtist();
  }
  
  window.updateUI=updateUI
  
  
  function setupMusicPlayer() {
    playlist = new Playlist();
  
  
    const song1 = new Song(
      "Revolution",
      "The Beatles",
      "https://files.catbox.moe/cfdd2l.png",
      "https://files.catbox.moe/mi2ujo.mp3"
    );

    const song2 = new Song(
      "Revolution",
      "The Beatles",
      "https://files.catbox.moe/cfdd2l.png",
      "https://files.catbox.moe/mi2ujo.mp3"
    );
    
    
    playlist.addSong(song1);
    playlist.addSong(song2);


  
    const playerContainer = document.createElement("div");
    playerContainer.id = "player";
  
   const displayBox = document.createElement("div");
  displayBox.id = "display-box";
  
  const coverElement = document.createElement("img");
  coverElement.id = "cover";
  displayBox.appendChild(coverElement);
  
  const infoContainer = document.createElement("div");
  infoContainer.id = "info-container";
  infoContainer.style.backgroundImage = "url('https://files.catbox.moe/2di1ml.png')";
  infoContainer.style.backgroundSize = "cover"; // Optional: adjust based on your needs
  infoContainer.style.color = "white"; // Set text color to white
  
  const songInfo = document.createElement("div");
  songInfo.id = "song-info";
  
  const titleElement = document.createElement("h3");
  titleElement.id = "title";
  titleElement.style.fontWeight = 'normal'; // Make it normal as per previous request
  songInfo.appendChild(titleElement);
  
  const artistElement = document.createElement("p");
  artistElement.id = "artist";
  songInfo.appendChild(artistElement);
  
  infoContainer.appendChild(songInfo);
  displayBox.appendChild(infoContainer);
  
  playerContainer.appendChild(displayBox);
  
  const controlsContainer = document.createElement("div");
  controlsContainer.id = "controls-container";
  
  const controls = document.createElement("div");
  controls.id = "controls";
  
  const prevButton = document.createElement("img");
  prevButton.id = "prevButton";
  prevButton.src = "https://files.catbox.moe/xl31kd.png";
  prevButton.alt = "Previous";
  controls.appendChild(prevButton);
  
  const playPauseButton = document.createElement("img");
  playPauseButton.id = "playPauseButton";
  playPauseButton.src = "https://files.catbox.moe/adrdr5.png"; // Set the default play image
  playPauseButton.alt = "Play/Pause";
  controls.appendChild(playPauseButton);
  
  const nextButton = document.createElement("img");
  nextButton.id = "nextButton";
  nextButton.src = "https://files.catbox.moe/acmow6.png";
  nextButton.alt = "Next";
  controls.appendChild(nextButton);
  
  controlsContainer.appendChild(controls);
  
  playPauseButton.addEventListener("click", function () {
    const audio = document.getElementById("audio");
    if (audio.paused) {
      audio.play();
      playPauseButton.src = "https://files.catbox.moe/adrdr5.png"; // Set the pause image
    } else {
      audio.pause();
      playPauseButton.src = "https://files.catbox.moe/mho7oo.png"; // Set the play image
    }
  });
  
  nextButton.addEventListener("click", function () {
    playlist.playNext();
    updateUI(playlist);
    const audio = document.getElementById("audio");
    audio.src = playlist.getCurrentSong().audioLink;
    audio.play();
  });
  
  prevButton.addEventListener("click", function () {
    playlist.playPrevious();
    updateUI(playlist);
    const audio = document.getElementById("audio");
    audio.src = playlist.getCurrentSong().audioLink;
    audio.play();
  });
  
    const progressBarContainer = document.createElement("div");
    progressBarContainer.id = "progress-bar-container";
  
    const progressBar = document.createElement("progress");
    progressBar.type = "range";
    progressBar.id = "progress-bar";
    progressBar.value = "0";
    progressBar.max = "100";
  
  
    progressBarContainer.appendChild(progressBar);
    controlsContainer.appendChild(progressBarContainer);
    playerContainer.appendChild(controlsContainer);
  
   const volumeContainer = document.createElement("div");
    volumeContainer.id = "volume-container";
  
  const volumeLabel = document.createElement("img");
  volumeLabel.src = "https://files.catbox.moe/384n87.png";
  volumeLabel.alt = "Volume";
  volumeContainer.appendChild(volumeLabel);
  
    const volumeSliderContainer = document.createElement("div");
    volumeSliderContainer.classList.add("is-vertical");
    volumeSliderContainer.style.marginLeft = "23%";
    volumeSliderContainer.style.height = "126px";
  
    const volumeSlider = document.createElement("input");
    volumeSlider.type = "range";
    volumeSlider.id = "volumeSlider";
    volumeSlider.min = 0;
    volumeSlider.max = 9;
    volumeSlider.step = 1;
    volumeSlider.value = 1; // Initial volume
  
    volumeSliderContainer.appendChild(volumeSlider);
  
    const volumeDisplay = document.createElement("span");
    volumeDisplay.id = "volume-display";
    volumeDisplay.style.fontWeight = 'bold'; 
    volumeDisplay.style.display = 'none';
    volumeDisplay.textContent = "1";
  
    volumeContainer.appendChild(volumeSliderContainer);
    volumeContainer.appendChild(volumeDisplay);
  
    playerContainer.appendChild(volumeContainer);
  
    gameWindow_player.insertAdjacentElement("afterend", playerContainer);
  
  
    function updateProgressBar() {
      const audio = document.getElementById("audio");
      const progress = (audio.currentTime / audio.duration) * 100;
      try{progressBar.value = progress}
    catch{}
    }
  
   
    progressBar.addEventListener("input", function () {
      const audio = document.getElementById("audio");
      const seekTime = (progressBar.value / 100) * audio.duration;
      audio.currentTime = seekTime;
    });
  
    const audio = document.createElement("audio");
    audio.id = "audio";
    audio.src = playlist.getCurrentSong().audioLink;
    audio.volume = 1/9;
  
    audio.addEventListener("timeupdate", updateProgressBar);
    audio.addEventListener("ended", function () {
      // Play the next song when the current song ends
      playlist.playNext();
      updateUI(playlist);
      audio.src = playlist.getCurrentSong().audioLink;
      audio.play();
    });
  
      let currentVolume = 1; // Initial volume
  
    volumeSlider.addEventListener("input", function () {
      currentVolume = parseInt(volumeSlider.value, 10);
      updateVolumeDisplay();
      updateAudioVolume();
    });
  
    function updateVolumeDisplay() {
      volumeDisplay.textContent = currentVolume;
    }
  
     function updateAudioVolume() {
      const audio = document.getElementById("audio");
      audio.volume = currentVolume / 9; // Set volume between 0 and 1
    }
  
    document.body.appendChild(audio);
    audio.play();
  
    // Update the UI when the page loads
    updateUI(playlist);
  }
  
  const style = document.createElement("style");
  style.textContent = `
  #player {
      border: 3px solid #C9C9C9; /* Add your desired border style */
      display: flex;
      flex-direction: row;
    height:191px;
      background-Image: url("https://files.catbox.moe/4mp7e8.png");
    }
  
    #display-box {
      display: flex;
      align-items: center;
      width: 50%;
    }
  
    #cover {
      width: 176px;
    height:176px;
    }
  
    #info-container {
      display: flex;
      flex-direction: row;
      height:178px;
    width:127px;
    margin-top: 3px;
    }
  
    #song-info {
      width: 100%;
    padding:5px;
    }
  
    #controls-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 10px;
      width:100%;
    padding-top:15px;
  
    }
    .is-vertical #volumeSlider {
    width: 16px;
    appearance: slider-vertical;
  }
  
    #controls {
      display: flex;
      flex-direction: row;
      justify-content: center;
      width: 80%;
    }
  
    #progress-bar-container {
      width: 100%;
    }
  
    #progress-bar {
      width: 80%;
      margin: auto;
      display: flex;
      margin-Top: 20px;
    }

    #menu_container {
        background-color: transparent;
    }

    #overall_result_container {
        background-color: transparent;
    }

    #state_result_container {
        background-color: transparent;
    }

    #map_container {
        background-color: #f6f6f6;
    }

    .final_results_table {
        color: black;
      }

      #state_result_data_summary table {
        color: black;
      }
      
      #state_result_data_summary table th,
      #state_result_data_summary table td {
        color: black; /* Ensure text color is black for both header and data cells */
      }
    
  `;
document.head.appendChild(style);

const gameWindow_player = document.getElementById("game_window");
//use this function directly or put it in an event listener to start the music on the press of a certain button
setupMusicPlayer();

 e = campaignTrail_temp
  
  document.head.innerHTML += `
  <link rel="stylesheet" href="https://kexanie.github.io/csswin10">
  <style>
  h3 {
    font-size: 1.025em !important;
    line-height: 17px;
}
label {
    font-size: 0.9em !important; 
    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif !important;
    line-height: 1.0; 
}
input {
    font-size: 0.9em !important; 
    line-height: 17px; 
}

  
  #game_window{max-width:1000px;}
  </style>`
  let contentBox = document.getElementsByClassName("content_box")[0];
  let contentSingle = document.getElementsByClassName("content_single")[0];
  
  let containerRef = document.getElementsByClassName("container")[0];
  
  function createBanner(url, sibling, isLeft) {
    let div = document.createElement("DIV");
    let img = document.createElement("IMG");
    div.style.position = "relative";
    div.style.margin = "auto";
    img.src = url;
    
    
  
    let x = document.createElement("DIV");
    x.innerText = "_";
    x.style.position = "absolute";
    x.style.padding = "2px";
    x.style.fontSize = "2pt";
    x.style.cursor = "pointer";
  
    div.appendChild(x);
  
    div.appendChild(img);
  
    if(isLeft) {
        sibling.parentNode.insertBefore(div, sibling);
    }
    else {
        sibling.parentNode.appendChild(div);
    }
    x.onclick = () => div.style.visibility = "hidden";
    x.onclick = () => img.style.visibility = "hidden";
    return img;
  }
  
  function addDynamicCSS() {
    var css = `
  
        label {
          cursor:default;
        }
  
        .inner_window_question h3 .mytooltip{
            background-color: lightskyblue;
        }
  
        .mytooltip {
            position: relative;
            display: inline-block;
            cursor: pointer;
            background-color: #d8dee8;
        }
  
        .mytooltip .mytooltiptext {
            width: 240px;
            background-color: #d8dee8;
            color: black;
            text-align: center;
            border-radius: 6px;
            padding: 10px;
            position: absolute;
            z-index: 99;
            bottom: 20%;
            left: 20%;
            margin-left: -90px;
            opacity: 0;
            transition: opacity 0.3s;
            border: 1px solid black;
            pointer-events: none;
            font-size: 13px !important;
            line-height: 1.5em !important;
            font-weight: normal !important;
            font-style: normal !important;
        }
  
        .mytooltip .mytooltiptext img {
            max-width: 240px;
            height: auto;
        }
  
        .mytooltip:hover .mytooltiptext {
            opacity: 1;
            transition-delay: 0.5s;
        }
    `;
  
    var styleElem = document.createElement('style');
    styleElem.type = 'text/css';
    
    styleElem.appendChild(document.createTextNode(css));
    
    document.head.appendChild(styleElem);
  }
  
  
  addDynamicCSS();
    
    tooltipList = [
    //Q1
      {searchString: "Obama", explanationText: "<img src=https://files.catbox.moe/d47a57.png><br> Could have been worse."},
      {searchString: "Schumer", explanationText: "<img src=https://files.catbox.moe/m67kb1.png><br> Middleman."},
      {searchString: "Chuck Schumer", explanationText: "<img src=https://files.catbox.moe/m67kb1.png><br> Middleman."},
      {searchString: "Paul Ryan", explanationText: "<img src=https://files.catbox.moe/5l1r80.png><br> The \"Great\" \"Moderator\"."},
      {searchString: "Nancy Pelosi", explanationText: "<img src=https://files.catbox.moe/tmsysf.png><br> Mouth of the establishment."},
      {searchString: "Pelosi", explanationText: "<img src=https://files.catbox.moe/tmsysf.png><br> Mouth of the establishment."},
      {searchString: "Bush", explanationText: "<img src=https://files.catbox.moe/i02gou.png><br> Worst ever."},

   //Q2
      {searchString: "Merrick Garland", explanationText: "<img src=https://files.catbox.moe/3n9v92.png><br> Obama's burden."},
      {searchString: "Garland", explanationText: "<img src=https://files.catbox.moe/3n9v92.png><br> Obama's burden."},
      {searchString: "Your supporters", explanationText: "<img src=https://files.catbox.moe/to1e17.png><br> Not me. <i>Us.</i>"},
      {searchString: "Citizens United v. FEC", explanationText: "<img src=https://files.catbox.moe/ylw553.png><br> Worst decision since Dred Scott."},
      {searchString: "Joe Manchin", explanationText: "<img src=https://files.catbox.moe/myrp1i.png><br> Coal ghoul."},
      {searchString: "Manchin", explanationText: "<img src=https://files.catbox.moe/myrp1i.png><br> Coal ghoul."},
      {searchString: "Susan Collins", explanationText: "<img src=https://files.catbox.moe/63ax0c.png><br> More than meets the eye."},
      {searchString: "Collins", explanationText: "<img src=https://files.catbox.moe/63ax0c.png><br> More than meets the eye."},
      {searchString: "Lisa Murkowski", explanationText: "<img src=https://files.catbox.moe/w1cy27.png><br> Sane Republican."},
      {searchString: "Murkowski", explanationText: "<img src=https://files.catbox.moe/w1cy27.png><br> Sane Republican."},
      {searchString: "Adalberto Jordan", explanationText: "<img src=https://files.catbox.moe/5oasgc.png><br> From the Eleventh Circuit."},

      {searchString: "The Movement", explanationText: "<img src=https://files.catbox.moe/to1e17.png><br> Not me. <i>Us.</i>"},
      {searchString: "Hillary", explanationText: "<img src=https://files.catbox.moe/uiih7m.png><br> Demon on your shoulder."},
      {searchString: "Geithner", explanationText: "<img src=https://files.catbox.moe/yppnhn.png><br> Puppet."},
      {searchString: "Klobuchar", explanationText: "<img src=https://files.catbox.moe/88xxov.png><br> Launchpad."},
      {searchString: "Warren", explanationText: "<img src=https://files.catbox.moe/39ukyc.png><br> Ahead of the curve."},
      {searchString: "Murphy", explanationText: "<img src=https://files.catbox.moe/en3egy.png><br> Clever."},
      {searchString: "Reed", explanationText: "<img src=https://files.catbox.moe/hflzt5.png><br> Up to something."},
      {searchString: "Haley", explanationText: "<img src=https://files.catbox.moe/1c63f0.png><br> Grauated from the Dick Cheney Academy of Foreign Policy."},

    ];

campaignTrail_temp.achievements = {
  
  "Mar-a-Lawful" : {
  "image" : "https://files.catbox.moe/bconuu.png",
  "description" : "Banish Satan",
  "cannotBeCheated" : true
  },

  "Regime Unchanged" : {
  "image" : "https://files.catbox.moe/zgz0ui.png",
  "description" : "Fly with an olive branch",
  "cannotBeCheated" : true
  },
  
  "Can't-Cun" : {
  "image" : "https://files.catbox.moe/1ccfro.png",
  "description" : "Avenge the victims",
  "cannotBeCheated" : true
  },
  
  "Outfoxed" : {
  "image" : "https://files.catbox.moe/78bu1b.png",
  "description" : "It won't happen here",
  "cannotBeCheated" : true
  },
  
  "Gifted Hands, Giftless Mind" : {
  "image" : "https://files.catbox.moe/ilsfkr.png",
  "description" : "Stop a surgery",
  "cannotBeCheated" : true
  },
  
  "White Texas" : {
  "image" : "https://files.catbox.moe/m4viq8.png",
  "description" : "Freeze an attorney",
  "cannotBeCheated" : true
  },

  "Kansas City Shuffle" : {
  "image" : "https://files.catbox.moe/hw7awy.png",
  "description" : "Destroy a flopulist",
  "cannotBeCheated" : true
  },

  "The Last Gipper" : {
  "image" : "https://files.catbox.moe/kyzxbk.png",
  "description" : "Make Carter proud",
  "cannotBeCheated" : true
  },


}